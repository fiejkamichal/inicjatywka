CREATE TABLE IF NOT EXISTS ActionStackEntryEntity (
    position INTEGER PRIMARY KEY NOT NULL,
    actionType INTEGER NOT NULL,
    actionId INTEGER NOT NULL
);

CREATE TABLE IF NOT EXISTS ActionStackPositionEntity (
    id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    actionStackEntryPosition INTEGER NOT NULL,
    FOREIGN KEY (actionStackEntryPosition) REFERENCES ActionStackEntryEntity(position)
);

CREATE TABLE IF NOT EXISTS PhaseChangeActionEntity (
    id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    fromPhase TEXT NOT NULL,
    toPhase TEXT NOT NULL,
    cardId INTEGER,
    round INTEGER NOT NULL,
    FOREIGN KEY (cardId) REFERENCES CardEntity(id)
);

CREATE TABLE IF NOT EXISTS CardAddActionEntity (
    id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    cardId INTEGER NOT NULL,
    FOREIGN KEY (cardId) REFERENCES CardEntity(id)
);

CREATE TABLE IF NOT EXISTS CardDeleteActionEntity (
    id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    cardId INTEGER NOT NULL,
    FOREIGN KEY (cardId) REFERENCES CardEntity(id)
);

CREATE TABLE IF NOT EXISTS CardUpdateActionEntity (
    id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    cardId INTEGER NOT NULL,
    prevCardId INTEGER NOT NULL,
    FOREIGN KEY (cardId) REFERENCES CardEntity(id),
    FOREIGN KEY (prevCardId) REFERENCES CardEntity(id)
);

CREATE TABLE IF NOT EXISTS NextTurnActionEntity (
    id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    fromCardId INTEGER NOT NULL,
    toCardId INTEGER NOT NULL,
    FOREIGN KEY (fromCardId) REFERENCES CardEntity(id),
    FOREIGN KEY (toCardId) REFERENCES CardEntity(id)
);

CREATE TABLE IF NOT EXISTS NextRoundActionEntity (
    id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    fromCardId INTEGER NOT NULL,
    toCardId INTEGER NOT NULL,
    fromRound INTEGER NOT NULL,
    toRound INTEGER NOT NULL,
    FOREIGN KEY (fromCardId) REFERENCES CardEntity(id),
    FOREIGN KEY (toCardId) REFERENCES CardEntity(id)
);

CREATE TABLE IF NOT EXISTS ActionListItem (
    actionListId INTEGER NOT NULL,
    actionId INTEGER NOT NULL,
    listPosition INTEGER NOT NULL,
    actionType INTEGER NOT NULL
);

CREATE TABLE IF NOT EXISTS ActionListActionEntity (
    id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL
);


getActionStackEntry:
SELECT * FROM ActionStackEntryEntity WHERE position = :position;

setActionStackEntry:
INSERT OR REPLACE INTO ActionStackEntryEntity VALUES (:position, :actionType, :actionId);

deleteActionStackEntry:
DELETE FROM ActionStackEntryEntity WHERE position = :position;

getNumOfActionStackEntries:
SELECT COUNT(*) FROM ActionStackEntryEntity;

getActionStackEntries:
SELECT * FROM ActionStackEntryEntity ORDER BY position ASC;



getActionStackPositionEntity:
SELECT * FROM ActionStackPositionEntity WHERE id = 0;

setActionStackPositionEntity:
INSERT OR REPLACE INTO ActionStackPositionEntity VALUES (0, :value);



insertPhaseChangeAction:
INSERT OR REPLACE INTO PhaseChangeActionEntity (fromPhase, toPhase, cardId, round)
VALUES (:fromPhase, :toPhase, :cardId, :round);

deletePhaseChangeAction:
DELETE FROM PhaseChangeActionEntity WHERE id = :actionId;

getPhaseChangeAction:
SELECT * FROM PhaseChangeActionEntity WHERE id = :actionId;

getPhaseChangeActions:
SELECT * FROM PhaseChangeActionEntity ORDER BY id ASC;


insertCardAddAction:
INSERT OR REPLACE INTO CardAddActionEntity (cardId) VALUES (:cardId);

deleteCardAddAction:
DELETE FROM CardAddActionEntity WHERE id = :actionId;

getCardAddAction:
SELECT * FROM CardAddActionEntity WHERE id = :actionId;

getCardAddActions:
SELECT * FROM CardAddActionEntity ORDER BY id ASC;


insertCardDeleteAction:
INSERT OR REPLACE INTO CardDeleteActionEntity (cardId) VALUES (:cardId);

deleteCardDeleteAction:
DELETE FROM CardDeleteActionEntity WHERE id = :actionId;

getCardDeleteAction:
SELECT * FROM CardDeleteActionEntity WHERE id = :actionId;

getCardDeleteActions:
SELECT * FROM CardDeleteActionEntity ORDER BY id ASC;


insertCardUpdateAction:
INSERT OR REPLACE INTO CardUpdateActionEntity
(cardId, prevCardId)
VALUES (:cardId, :prevCardId);

deleteCardUpdateAction:
DELETE FROM CardUpdateActionEntity WHERE id = :actionId;

getCardUpdateAction:
SELECT * FROM CardUpdateActionEntity WHERE id = :actionId;

getCardUpdateActions:
SELECT * FROM CardUpdateActionEntity ORDER BY id ASC;


insertNextTurnAction:
INSERT OR REPLACE INTO NextTurnActionEntity
(fromCardId, toCardId)
VALUES (:fromCardId, :toCardId);

deleteNextTurnAction:
DELETE FROM NextTurnActionEntity WHERE id = :actionId;

getNextTurnAction:
SELECT * FROM NextTurnActionEntity WHERE id = :actionId;

getNextTurnActions:
SELECT * FROM NextTurnActionEntity ORDER BY id ASC;


insertNextRoundAction:
INSERT OR REPLACE INTO NextRoundActionEntity
(fromCardId, toCardId, fromRound, toRound)
VALUES (:fromCardId, :toCardId, :fromRound, :toRound);

deleteNextRoundAction:
DELETE FROM NextRoundActionEntity WHERE id = :actionId;

getNextRoundAction:
SELECT * FROM NextRoundActionEntity WHERE id = :actionId;

getNextRoundActions:
SELECT * FROM NextRoundActionEntity ORDER BY id ASC;



insertActionListAction:
INSERT OR REPLACE INTO ActionListActionEntity (id) VALUES (NULL);

deleteActionListAction:
DELETE FROM ActionListActionEntity WHERE id = :actionId;

getActionListActions:
SELECT * FROM ActionListActionEntity ORDER BY id ASC;


insertActionListItem:
INSERT OR REPLACE INTO ActionListItem
(actionId, actionListId, actionType, listPosition)
VALUES (:actionId, :actionListId, :actionType, :listPosition);

deleteActionListItems:
DELETE FROM ActionListItem WHERE actionListId = :actionListId;

getActionListItems:
SELECT * FROM ActionListItem WHERE actionListId = :actionListId ORDER BY listPosition ASC;

getAllActionListItems:
SELECT * FROM ActionListItem ORDER BY actionListId,listPosition ASC;

lastInsertRowId:
SELECT last_insert_rowid();